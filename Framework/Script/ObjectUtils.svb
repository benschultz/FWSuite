' ############################################################################################################################################################################################################
' ##################################################################################################################################################################################################################################
' ##                           FILE HEADER
' ############################################################################################################################################################################################################
' ## File Name: ObjectUtils.svb
' ## Path:      <Update once Deployed>
' ## Reference: <Not Sure ... need Project Number>
' ##
' ## (C) Copyright Ventyx, an ABB Company, 2014
' ## 
' ############################################################################################################################################################################################################
' ##                         FILE DESCRIPTION                                                                                                                                                                                                       
' ##################################################################################################################################################################################################################################
' ## Object Utilities framework
' ## Description: Collection of useful functions for dealing with test objects
' ##
' ## Function List:
' ##         WaitObjXTimes
' ##         WaitChildXSecs
' ##         WaitTilVisibleOnScreen
' ##         WaitTilInVisibleOnScreen
' ##         WaitTextXSecs
' ##         LoadDialogue
' ##         DoKeys
' ##         ClearTextArea
' ##         ClickLinkOrButton
' ##         FindPanelWithandWithoutText
' ##         FindTextInTableColumn
' ##         CountTableRows
' ##         FindMultiObject
' ##         CompareText
' ############################################################################

' ############################################################################
' ## Name: WaitObjXTimes Author: Ben A. Schultz  Date 12/19/2012
' ## Function to perform Multiple Exists Waits on an Object
' ## Parameters:
' ##        obj    Object that Supports the Exists Method to Wait On
' ##        nTimes Number of Exists wait cycles to wait for
' ##        sDescr Description of what we are waiting for
' ## Returns: True (Object Exists), False (Object not found after nTimes Waits)
' ############################################################################
Public Function WaitObjXTimes(obj, nTimes, sDescr)

dim nIterations

  WaitObjXTimes = False
  log.Enabled = false
  nIterations = 0
  do
    if obj.Exists then
      WaitObjXTimes = True
      nIterations = nIterations + 1
      log.Enabled = True
      Exit Function
    else
      aqUtils.Delay 1000
      nIterations = nIterations + 1
    end if
  Loop Until (nIterations >= nTimes)
  log.Enabled = True
  
End Function ' WaitObjXTimes
' ##########################################################
' ##########################################################

' ############################################################################
' ## Name: WaitChildXSecs Author: Ben A. Schultz  Date 2/06/2013
' ## Function to perform a wait on object existence or nonexistence for a 
' ## Maximum number of seconds.
' ## Parameters:
' ## Parent         (Object)The Object that always exists that has a child that  
' ##                may or may not exist. 
' ## Child          (String) The EXACT name of the object (from the object 
' ##                browser)
' ## nSecs          (Number) Maximum number of seconds to wait for 
' ##                success
' ## bDoesNotExist  (Boolean) Reverses the logic so the object is presumed to 
' ##                exist and will return success if the object goes away in the 
' ##                timeframe. Otherwise the return of success is when the 
' ##                object comes into existence.
' ## sDescr         Description of task at hand
' ## Return Values:
' ## Returns True on Success and False of Failure
' ############################################################################
Public Function WaitChildXSecs(Parent, Child, nSecs, bDoesNotExist, sDescr)
if Not IsObject(Parent) then
  log.error "WaitChildXSecs: Parent Object Parameter IS NOT an OBJECT!", _
              "Child: " & Child & vbCr & _
              "nSecs: " & nSecs & vbCr & _
              "bDoesNotExist: " & bDoesNotExist & vbCr & _
              "sDescr: " & sDescr
  WaitChildXSecs = False
  exit Function
end if
sStartTime = now() 
if bDoesNotExist then
  if not Parent.WaitChild(Child, 0).exists then
    WaitChildXSecs = True
  else
    nWaits = .1
    aqUtils.Delay 100
    do
      if not Parent.WaitChild(Child, 0).exists then
        WaitChildXSecs = True
        Exit Function
      else
        nWaits = nWaits + .1
        aqUtils.Delay 100
      end if
    loop until (nWaits >= nSecs)
    WaitChildXSecs = False
  end if
Else
  if Parent.WaitChild(Child, 0).exists then
    WaitChildXSecs = True
  else
    nWaits = .1
    aqUtils.Delay 100
    do
      if not Parent.exists then
        nWaits = DateDiff("s", sStart, Now())
      end if
      if Parent.WaitChild(Child, 0).exists then
        WaitChildXSecs = True
        Exit Function
      else
        nWaits = nWaits + .1
        aqUtils.Delay 100
      end if
    loop until (nWaits >= nSecs)
    WaitChildXSecs = False 
  End If 
End If

End Function ' WaitChildXSecs
' ##########################################################
' ##########################################################

Public Sub UnitTest_WaitChildXSecs()

if WaitChildXSecs(Aliases.tableMerchantDetailsTop, "Cell(0, 2)", 60, False, "Unit Test") then
  log.Message "Got IT"
else
  log.Warning "No GO"
End If

End Sub ' UnitTest_WaitChildXSecs
' ##########################################################
' ##########################################################

public Sub UnitTest_WaitObjXTimes()

Aliases.inputSearchformQueryToken.SetText "Itunes"
Aliases.btnSearchformSearchButton.Click
aqUtils.Delay 500
if WaitObjXTimes(Aliases.table_MDM_Search_Results_Table.cell_1st_Link_Item_SearchResults,10,"1st Cell of Search Results") then
  log.Message "Found Cell"
else
  log.Warning "Cell Not Found"
End If

End Sub ' UnitTest_WaitObjXTimes
' ##########################################################
' ##########################################################

' ############################################################################
' ## Name: WaitTilVisibleOnScreen Author: Ben A. Schultz Date: 03/06/2013
' ## This function will delay a script until the Object (Obj) becomes visible on
' ## the screen or the specified time (nSecs) has expired. 
' ## It will first check for existence of Obj and wait up to nSecs for 
' ## existence.
' ## Once Existence is established if the object is not visible on screen
' ## then we will wait the balance of the time for the Obj to become Visible.
' ## There is an artificial delay if the object becomes visible to allow for 
' ## finalization of the objects properties ... seems like the object doesn't 
' ## become completely usable when it becomes visible so this delay reduces
' ## bogus object errors.
' ## Return Values (boolean): True if object becomes Visible
' ##                          False if object does not become Visible
' ## Parameters:
' ##          Obj     - The Object to wait on
' ##          nSecs   - The max amount of time to wait in seconds
' ##          sDescr  - Object description to make logging meaningful
' ##          LogMsgs - LogMsgs during this process (not used)
' ## Returns:
' ##          True (Obj is VisibleOnScreen), False (Obj did not become
' ##                                          Visible on screen in nSecs.)
' ############################################################################
Public Function WaitTilVisibleOnScreen(Obj, nSecs, sDescr, LogMsgs)

dim nInterations
dim sStart
dim nArtificialDelay

nArtificialDelay = 400

sStart = Now()
do
  if not Obj.Exists then
    nInterations = DateDiff("s", sStart, Now())
    if nInterations >= nSecs then
      WaitTilVisibleOnScreen = False
      exit function
    end if
  else
    nInterations = DateDiff("s", sStart, Now())
    exit do
  end if
loop until (nInterations >= nSecs)
    
if Obj.VisibleOnScreen then
  WaitTilVisibleOnScreen = True
  aqUtils.Delay nArtificialDelay
  Exit Function
else
  do
    if Obj.VisibleOnScreen then
      WaitTilVisibleOnScreen = True
      aqUtils.Delay nArtificialDelay
      Exit Function
    end if
    aqUtils.Delay 250
    nIterations = nIterations + .25
    if nIterations >= nSecs then
      WaitTilVisibleOnScreen = False
      aqUtils.Delay nArtificialDelay
      Exit Function
    end if
  loop until (nIterations >= nSecs)
End If
WaitTilVisibleOnScreen = False
aqUtils.Delay nArtificialDelay

End Function ' WaitTilVisibleOnScreen
' ##########################################################
' ##########################################################

Public Sub UnitTest_WaitTilVisibleOnScreen()

if WaitTilVisibleOnScreen(Aliases.panelMerchantDetailsBusinessUnit, 60, "Unit Test", False) then
  log.Message "Saw Object"
  'Aliases.btnMerchantDetailsBusinessUnitEdit.Click
else
  log.Message "Object never appeared"
end if 

End Sub ' UnitTest_WaitTilVisibleOnScreen
' ##########################################################
' ##########################################################

' ############################################################################
' ## Name: WaitTilInVisibleOnScreen Author: Ben A. Schultz Date: 03/06/2013
' ## This function will delay a script until the Object (Obj) becomes invisible
' ## or the specified time (nSecs) has expired. 
' ## It will first check for existence of Obj and wait up to nSecs for 
' ## existence.
' ## Once Existence is established if the object is visible on screen
' ## then we will wait the balance of the time for the Obj to become InVisible.
' ## There is an artificial delay that is added to the wait time ... it seems
' ## that the object becoming InVisible might not be completely true when
' ## the property becomes set so this delay will avoid bogus overlapping
' ## windows delays.
' ## Return Values (boolean): True if object becomes InVisible
' ##                          False if object does not become InVisible
' ## Parameters:
' ##          Obj     - The Object to wait on
' ##          nSecs   - The max amount of time to wait in seconds
' ##          sDescr  - Object description to make logging meaningful
' ##          LogMsgs - LogMsgs during this process (not used)
' ## Returns:
' ##          True (Object in NOT VisibleOnScreen)
' ##          False (Object did not disappear after nSecs)
' ############################################################################
' 03/06/2013 Ben A. Schultz
Public Function WaitTilInVisibleOnScreen(Obj, nSecs, sDescr, LogMsgs)

dim nInterations
dim sStart
dim nArtificialDelay

nArtificialDelay = 400

sStart = Now()
'do
'  if not Obj.Exists then
'    nInterations = DateDiff("s", sStart, Now())
'    WaitTilInVisibleOnScreen = True
'    exit function
'  else
'    nInterations = DateDiff("s", sStart, Now())
'    exit do
'  end if
'loop until (nInterations >= nSecs)

if Not Obj.VisibleOnScreen then
  WaitTilInVisibleOnScreen = True
  aqUtils.Delay nArtificialDelay
  Exit Function
else
  do
    if not Obj.Exists then
      WaitTilInVisibleOnScreen = True
      aqUtils.Delay nArtificialDelay
      Exit Function
    end if
    if Not Obj.VisibleOnScreen then
      WaitTilInVisibleOnScreen = True
      aqUtils.Delay nArtificialDelay
      Exit Function
    end if
    aqUtils.Delay 250
    nIterations = nIterations + .25
    if nIterations >= nSecs then
      WaitTilInVisibleOnScreen = False
      aqUtils.Delay nArtificialDelay
      Exit Function
    end if
  loop until (nIterations >= nSecs)
End If
WaitTilInVisibleOnScreen = False
aqUtils.Delay nArtificialDelay

End Function ' WaitTilInVisibleOnScreen
' ##########################################################
' ##########################################################

' ############################################################################
' ## Name: WaitTextXSecs Author: Ben A. Schultz  Date 01/07/2012
' ## Function wait until the contentText of a Panel object matches the Target
' ## value.
' ## Parameters:
' ##        obj    Object that Supports the contentText Property to Wait On
' ##        Target The text we want to wait for in the Panel (See Note Below)
' ##        nSecs  Number of Seconds to wait for
' ##        sDescr Description of what we are waiting for
' ## Returns:
' ##        True (Text exists)
' ##        False (Text did not appear in nSecs)
' ## NOTE on Target parameter (2/06/2013 BAS)
' ## Re-engineered this function to support orginal functionality for backwards
' ## compatibility and Multiple Target Token Text.  Within Target if there
' ## is a delimiter (chr(0)) then Target contains multiple search tokens. Also
' ## added the ability to wait until something does NOT exist in the text. To
' ## do this you insert the token '[Not]' before the search term. This will 
' ## cause a successful (true) return when that token is NOT in the text.
' ############################################################################
Public Function WaitTextXSecs(obj, Target, nSecs, sDescr, LogMsgs)

dim nIterations
Dim sChk, sTarg

  
  WaitTextXSecs = False
  nIterations = 0
  sTarg = Target
  ' *************************************************************
  ' **  NOTE: Ben A. Schultz (Xpanxion) 01/07/2013
  ' **  Noticed strange behavior where the displayed value on the
  ' **  Product Detail Form for Description did not match the value
  ' **  being editied (what was in the database) and the difference
  ' **  would be an extra space in the text randomly placed.  This
  ' **  scenerio caused the check below to fail.  In order to insure
  ' **  the check works we decided to normalize both the Target and
  ' **  sChk strings by removing all double spaces and replacing 
  ' **  them with single spaces.
  ' *************************************************************
  sTarg = Replace(sTarg, "  ", " ")
  if sTarg <> Target then
    'log.Message "Altered Target:", _
    '            "'" & Target & "' was Target" & vbcr & _
    '            "'" & sTarg & "' is the new value"
  End If
  if instr(1, sTarg, chr(0)) = 0 then
    do
      sChk =obj.contentText
      sChk = replace(sChk, "  ", " ")
      sChk = left(sChk, len(sTarg))
      'log.message "Seeing '" & sChk &  "'", _
      '            "'" & left(obj.contentText, len(sTarg)) & "'" & vbCR & _
      '            "'" & sChk & "'" & vbCR & _
      '            "'" & sTarg & "'"
      if ucase(sChk) = ucase(sTarg) then
        WaitTextXSecs = True
        nIterations = nIterations + 0.25
        if LogMsgs then
          Inc_TestCases 1
          log.Message "Found '" & sTarg & "' While waiting for " & sDescr, _
                      "Found '" & sTarg & "' While waiting for " & sDescr & vbcr & _
                      "'" & sChk & "' Seen on Screen" & vbcr & _
                      "'" & sTarg & "' Target used in search." & vbCR & _
                      "'" & Target & "' Target requested."
        end if
        Exit Function
      else
        aqUtils.Delay 250
        nIterations = nIterations + 0.25
      end if
    Loop Until (nIterations >= nSecs)
    if LogMsgs then
      Inc_TestCases 1
      log.Warning "Never Found '" & sTarg & "' While waiting for " & sDescr, _
                  "'" & sChk & "' Last Seen on Screen" & vbcr & _
                  "'" & sTarg & "' Target used in search." & vbCR & _
                  "'" & Target & "' Target requested."
    End If
  else
    ' Do a wait for Multiple objects
    mTargArray = split(sTarg, Chr(0))
    do
      sChk =obj.contentText
      sChk = replace(sChk, "  ", " ")
      for each sTarg in mTargArray
        if trim(sTarg) <> "" then
          'log.Message "Checking '" & sTarg & "'"
          bDoesContain = False
          if len(sTarg) >= Len("[NOT]") then
            if ucase(left(sTarg, Len("[NOT]"))) <> "[NOT]" then
              bDoesContain = True
            end if
          else
            bDoesContain = True
          end if
          if bDoesContain then
            if instr(1,sChk, sTarg, vbTextCompare) > 0 then
              WaitTextXSecs = True
              nIterations = nIterations + 0.25
              if LogMsgs then
                Inc_TestCases 1
                log.Message "Found '" & sTarg & "' While waiting for " & sDescr, _
                            "Found '" & sTarg & "' While waiting for " & sDescr & vbcr & _
                            "'" & sChk & "' Seen on Screen" & vbcr & _
                            "'" & sTarg & "' Target used in search." & vbCR & _
                            "'" & Target & "' Target requested."
              end if
              Exit Function
            end if
          else
            if instr(1,sChk, mid(sTarg, len("[NOT] ")), vbTextCompare) = 0 then
              WaitTextXSecs = True
              nIterations = nIterations + 0.25
              if LogMsgs then
                if mid(sTarg, len("[Not] "), 1) = Chr(10) then
                  if len(sTarg) = len("[Not] ") then
                    sTarg = "[Not]Chr(10)"
                  else
                    sTarg = "[Not]Chr(10)" & mid(sTarg, len("[Not]  "))
                  end if
                end if
                Inc_TestCases 1
                log.Message "Found '" & sTarg & "' While waiting for " & sDescr, _
                            "Found '" & sTarg & "' While waiting for " & sDescr & vbcr & _
                            "'" & sChk & "' Seen on Screen" & vbcr & _
                            "'" & sTarg & "' Target used in search." & vbCR & _
                            "'" & Target & "' Target requested."
              end if
              Exit Function
            end if
          end if
        end if
      next 
      aqUtils.Delay 250
      nIterations = nIterations + 0.25
    loop until (nIterations >= nSecs)
    if LogMsgs then
      Inc_TestCases 1
      log.Warning "Never Found '" & sTarg & "' While waiting for " & sDescr, _
                  "'" & sChk & "' Last Seen on Screen" & vbcr & _
                  "'" & sTarg & "' Target used in search." & vbCR & _
                  "'" & Target & "' Target requested."
    End If  
  End If
        
End Function ' WaitTextXSecs
' ##########################################################
' ##########################################################

Public Sub UnitTest_WaitTextXSecs()

'if WaitTextXSecs(Aliases.panelMerchantDetailsBusinessUnit, "[Not]" & chr(10) & "BUS" & chr(0) & "---", 6, "Unit Test", True) then
if WaitTextXSecs(Aliases.panelMerchantDetailsBusinessUnit, "---", 6, "Unit Test", True) then
  log.Message("Success")
else
  log.Message("Failure")
end if

End Sub ' UnitTest_WaitTextXSecs
' ##########################################################
' ##########################################################

' ############################################################################
' ## Name: LoadDialogue Author: Ben A. Schultz (BAS)  Date 07/12/2013
' ## This function will load a Dialogue on a page that is preloaded (the 
' ## object always exists, but is not visible when not being used). The function
' ## will wait for a specified # of seconds and either log a warning or message
' ## (depending on bWarnoFail Parameter)  if the WaitObj does not display in time. 
' ## NOTE: nWaitSecs must be > 0.2 seconds or the function will fail every time!
' ## Return Values (Boolean):
' ## - True if WaitObj Becomes visible before nWaitSecs expires
' ## - False if WaitObj Does Not bevome visible before nWaitSecs expires
' ## Parameters:
' ## - LoadButtonObj - A Clickable object which results in the WaitObj to be
' ##                    displayed on the screen.
' ## - sButtonDescr  - A description of the LoadButtonObj like: "Send as Gift Button"
' ## - WaitObj       - An Object on that becomes visibleOnScreen when displaying of
' ##                    a Dialogue is complete.
' ## - sWaitDescr    - Description of the WaitObj like: "Cancel Button"
' ## - sDialogueDesr - Description of the object we are loading like: "Send as Gift Dialogue"
' ## - nWaitSecs     - Number of seconds to wait before returning a failure. Can be a decimal
' ##                   number, but MUST be >0.2 or the function will fail.
' ## - ScreenObj     - The page to display in the log on failure. (Removed use)
' ## - bWarnOnFail   - Boolean to control if a warning should be logged on failure
' ## - CallingSub    - The routine calling LoadDialogue for debug purposes.
' ############################################################################
' ## History: 
' ## 07/12/2013 (BAS) LoadDialogue Function Created
' ## 01/10/2014 (BAS) Removed use of ScreenObj (Left parameter for Backwards
' ##                  compatibility.
' ############################################################################
Public Function LoadDialogue(LoadButtonObj, sButtonDescr, WaitObj, sWaitDescr, sDialogueDescr, _
                              nWaitSecs, ScreenObj, bWarnOnFail, CallingSub)

dim nTries
dim sStart
dim nSecs

log.Message "Click " & sButtonDescr, "Click " & sButtonDescr
nTries = 0 'Public Function WaitTilVisibleOnScreen(Obj, nSecs, sDescr, LogMsgs)

' NOTE: This WaitChildXSecs is to insure that the Modal has unloaded before 
'       Trying to click the button
'Public Function WaitChildXSecs(Parent, Child, nSecs, bDoesNotExist, sDescr)
WaitChildXSecs Aliases.browser.pageWalmartDigitalDeliveryCenter, _
               "Panel(" & chr(34) & "simplemodal_overlay" & chr(34) & ")", _
               3, True, "Make sure modal is gone before continuing"
               ' (BAS) changed wait on this from 30 to 3 seconds

MoveMouseToObject LoadButtonObj, 100
Inc_TestCases 1
LoadButtonObj.click
aqUtils.Delay 500
if instr(1, Project.Variables.sSiteName, "Internet", vbTextCompare) > 0 then
  aqUtils.Delay 2000
end if
sStart = Now()
Inc_TestCases 1

do while not WaitTilVisibleOnScreen(WaitObj, .2, sWaitDescr & " on " & sDialogueDescr & " to Display", False)
  nSecs = DateDiff("s", sStart, Now())
  if nSecs = 0 then
    nSecs = 0.2
  end if
  nTries = nTries  + nSecs
  if nTries >= nWaitSecs then
    if bWarnOnFail then
      log.Warning CallingSub & ": " & sDialogueDescr & " Failed to load ...", _
                  CallingSub & ": " & sDialogueDescr & " Failed to load ...", _
                  pmNormal
    else
      log.Message CallingSub & ": " & sDialogueDescr & " Failed to load ...", _
                  CallingSub & ": " & sDialogueDescr & " Failed to load ...", _
                  pmNormal
    end if
    LoadDialogue = False
    exit function
  end if
  sStart = Now()
loop

LoadDialogue = true

End Function ' LoadDialogue
' ##########################################################
' ##########################################################

' ############################################################################
' ## Name: DoKeys Author: Ben A. Schultz (BAS) 97/12-2013
' ## Description:
' ## This function will use the Keys method to set the text in the InputObject
' ## to the sTextToEnter.  The InputObject must have the .value property that
' ## holds the currently displayed text.
' ##
' ##
' ## Return Value: (Boolean) True if InputObject.Value gets set to sTextToEnter
' ##                         before nWaitSecs elapses.
' ##                         False if Not
' ## Parameters:
' ## - InputObject (Object) A Text Input object with .Value property that
' ##                        holds the text displayed in the object.
' ## - sInputDescr (String) A description of the InputObject
' ## - sTextToEnter (String) The Text we need in the InputObject
' ## - nWaitSecs (Number)   The Maximum seconds to waitu before failing the 
' ##                        operation.
' ## - bLogWarnOnFail (Boolean) Log warning on Fail if True, Message if False
' ############################################################################
' ## Change History
' ## 07/12-2013 (BAS) DoKeys Function Created
' ##
' ############################################################################
Public Function DoKeys(InputObject, sInputDescr, sTextToEnter, nWaitSecs, bLogWarnOnFail)

dim sStart, sKeysText, sKeysCheck
dim nSecsToClear
sStart = Now()
if instr(1, sTextToEnter, vbCr) > 0 then
  if instr(1,sTextToEnter, vbCrLf) > 0 then
    sKeysText = replace(sTextToEnter, vbcrlf, "[Enter]")
  else
    sKeysText = Replace(sTextToEnter, vbCr, "[Enter]")
  end if
elseif instr(1, sTextToEnter, vbLf) > 0 then
  sKeysText = replace(sTextToEnter, vbLf, "[Enter]")
else
  sKeysText = sTextToEnter
end if
sKeysCheck = replace(sKeysText, "[Enter]", Project.Variables.gsCurrEoln)

log.AppendFolder "DoKeys: Enter '" & sTextToEnter & "' In " & sInputDescr, _
                  "Initial Value: '" & InputObject.value & "'" & vbCr & _
                  "Input Description: " & sInputDescr & vbCr & _
                  "Text To Enter: '" & sTextToEnter & "'" & vbCr & _
                  "Max Secs Til Fail: " & nWaitSecs & vbcr & _
                  "Log Warning on Failure: " & bLogWarnOnFail
do while InputObject.value <> sKeysCheck
  ClearTextArea InputObject
  InputObject.Keys sKeysText
  if (DateDiff("s", sStart, Now()) >= nWaitSecs) and (InputObject.value <> sTextToEnter) then
    if bLogWarnOnFail then
      log.Warning "Unable to set Text in " & sInputDescr, _
                  "Expected: " & vbcr & sTextToEnter & vbcr & _
                  "Actual: " & vbCr &  InputObject.value
    else
      log.Message "Unable to set Text in " & sInputDescr, _
                  "Expected: " & vbcr & sTextToEnter & vbcr & _
                  "Actual: " & vbCr &  InputObject.value
    end if
    DoKeys = false
    log.PopLogFolder
    exit Function
  end if
loop  
DoKeys = true
log.PopLogFolder

End Function ' DoKeys
' ##########################################################
' ##########################################################

Public Sub UnitTest_DoKeys()

DoKeys Aliases.inputGiftDialogueMessageTextArea, "Gift Message TextArea", "This is it" & chr(10) & "again" & chr(10) & "Done...", 10, False

End Sub ' UnitTest_DoKeys
' ##########################################################
' ##########################################################

' ############################################################################
' ## Name: ClearTextArea Author: Ben A. Schultz (BAS) 07/12/2013
' ## Description:
' ## This routine will clear a textbox or textarea as long as the 
' ## object has the .value property that contains the displayed text.
' ##
' ##
' ##
' ## Return Value: (None)
' ##
' ## Parameters:
' ## - InputObject (Object) A Text Input object with .Value property that
' ##                        holds the text displayed in the object.
' ############################################################################
' ## Change History
' ## 07/12/2013 (BAS) ClearTextArea Subroutine Created
' ##
' ############################################################################
public sub ClearTextArea(InputObject)

dim sOrigValue
nTries = 0
log.Enabled = false
if InputObject.Value <> "" then
  sOrigValue = InputObject.Value
  call InputObject.Keys("^[End]^![Home][Del]")
  do while InputObject.value <> ""
    call InputObject.Keys("^[End]^![Home][Del]")
    aqUtils.Delay 300
    if len(InputObject.value) = len(sOrigValue) then
      call InputObject.Keys("^[End]^![Home][Del]")
      if len(InputObject.value) = len(sOrigValue) then
        log.Enabled = true
        log.Error "ClearTextArea cannot clear Textbox ... Aborting Tests!", _
                      "ClearTextArea cannot clear Textbox ... Aborting Tests!", _
                      pmNormal, , InputObject
        runner.Stop
      end if
    end if
    sOrigValue = InputObject.Value
  loop
end if
log.Enabled = true

End Sub ' ClearTextArea
' ##########################################################
' ##########################################################

public sub UnitTest_ClearTextArea()
ClearTextArea Aliases.inputGiftDialogueMessageTextArea
Aliases.inputGiftDialogueMessageTextArea.Keys "line 1[Enter]line 2[Enter]line 3[Enter]"

End Sub 'UnitTest_ClearTextArea
' ##########################################################
' ##########################################################

' ############################################################################
' ## Name: ClickLinkOrButton Author: Ben A. Schultz (BAS) 07/15/2013
' ## Description:
' ##    ClickLinkOrButton will click a Link or button and then wait for
' ##    the WaitObj to either appear or disappear
' ##
' ##
' ##
' ## Return Value: (Boolean) True - Success, False - Failure
' ##
' ## Parameters:
' ##      - ClickThis (The Button or Link Object to Click)
' ##      - sDescr    (string description of the object we are clicking)
' ##      - WaitObj   (The Object to wait on to disappear or appear before
' ##                   continuing)
' ##      - sWaitDescr (string description of the WaitObj)
' ##      - bWaitTilInVisible (True = Wait until WaitObj disappears,
' ##                          False = Wait until WaitObj appears)
' ##      - nSecsToWait (Time in Seconds to wait before failure)
' ##      - bLogWarnOnFail (True log Warning on Failure, 
' ##                       False Log Message on Failure) 
' ##   
' ############################################################################
' ## Change History
' ## 07/15/2013 (BAS) ClickLinkOrButton Subroutine Created
' ##
' ############################################################################
Public Function ClickLinkOrButton(ClickThis, sDescr, WaitObj, sWaitDescr, _
                                    bWaitTilInVisible, nSecsToWait, bLogWarnOnFail)
log.Message "bWaitTilInVisible = " & bWaitTilInVisible & " nSecsToWait =  " & nSecsToWait
log.AppendFolder "Click " & sDescr, "Click " & sDescr
ClickLinkOrButton = True
if ClickThis.Exists then
  ClickThis.HoverMouse
  if ClickThis.VisibleOnScreen then
    ClickThis.Click
    if bWaitTilInVisible then
      if WaitTilInVisibleOnScreen(WaitObj, nSecsToWait, sWaitDescr & " to Become Invisible", True) then
        log.Message sWaitDescr & " gone now", sWaitDesc & " gone now."
      else
        if bLogWarnOnFail then
          log.Warning sWaitDescr & " did not disappear in " & nSecsToWait, _
                      sWaitDescr & " did not disappear in " & nSecsToWait
        else
          log.Message sWaitDescr & " did not disappear in " & nSecsToWait, _
                      sWaitDescr & " did not disappear in " & nSecsToWait
        end if
        ClickLinkOrButton = False
      End if
    else
      if WaitTilVisibleOnScreen(WaitObj, nSecsToWait, sWaitDescr & " to display", True) then
        log.Message sWaitDescr & " has displayed", sWaitDescr & " has displayed"
      else
        if bLogWarnOnFail then
          log.Warning sWaitDescr & " did not appear in " & nSecsToWait, _
                      sWaitDescr & " did not appear in " & nSecsToWait
        else
          log.Message sWaitDescr & " did not appear in " & nSecsToWait, _
                      sWaitDescr & " did not appear in " & nSecsToWait
        end if
        ClickLinkOrButton = False
      End If  
    End if
  Else
    ' Ignore bLogOnFail if object is invisible
    log.Warning sDescr & " is not visible on screen!", sDescr & " is not visible on screen!"
    ClickLinkOrButton = False
  End if
Else
  ' Ignore bLogOnFail if object does not exist
  log.Warning sDescr & " Does Not Exist!", sDescr & " Does Not Exist!"
  ClickLinkOrButton = False
End if
log.PopLogFolder

End Function ' ClickLinkOrButton
' ##########################################################
' ##########################################################


' ############################################################################
' ## Name: FindPanelWithandWithoutText Author: Ben A. Schultz (BAS) 07/16/2013
' ## Description:
' ##      Searches the Panel and Panel(n) child panels (where n is 0 to .childcount) 
' ## for contentText which Contains sWith text and does not Contain sWithout
' ##
' ##
' ##
' ## Return Value: None (Project.Variables.PanelObjRetVal is set when the
' ##                     correct panel is found since this routine does
' ##                     recursion on failure to find text)
' ##
' ## Parameters:
' ##        - PanelObject (Parent Panel to search)
' ##        - sWith       (Text that must exist in contentText of the Target)
' ##        - sWithout    (Text that must not exist in the contentText of the Target)
' ##   
' ############################################################################
' ## Change History
' ## 07/16/2013 (BAS) FindPanelWithandWithoutText Subroutine Created
' ##
' ############################################################################
Public Sub FindPanelWithandWithoutText(PanelObject, sWith, sWithout)

Dim i

if (instr(1, PanelObject.contentText, sWith, vbTextCompare) > 0) and _
   (instr(1, PanelObject.contentText, sWithout, vbTextCompare) = 0) then
  Set Project.Variables.PanelObjRetVal = PanelObject
  exit sub
else
  'log.Message PanelObject.FullName, PanelObject.ContentText
  for i = 0 to (PanelObject.ChildCount - 1)
    if WaitChildXSecs(PanelObject, "Panel(" & i & ")", .5, False, "Panel Exists?") then
      FindPanelWithandWithoutText PanelObject.Panel(i), sWith, SWithOut
     
    else
      exit for
    end if
  next 
end if


End Sub ' FindPanelWithandWithoutText
' ##########################################################
' ##########################################################

Public Sub UnitTest_FindPanelWithandWithoutText()


FindPanelWithandWithoutText Aliases.browser.pagePrintPreview.Panel("wrapper").Panel("*content"), "UPC", "Steps"
if not (Project.Variables.PanelObjRetVal is Nothing) then
  log.Message "Result Text:", Project.Variables.PanelObjRetVal.contentText
else
  Log.Message "Object Not Found", "Object Not Found"
end if

End Sub ' UnitTest_FindPanelWithandWithoutText
' ##########################################################
' ##########################################################

' ##########################################################
' ##########################################################

' ############################################################################
' ## Name: FindTextInTableColumn Author: Ben A. Schultz Date: 02/18/2013 
' ## This function will return the row number of the table that contains
' ## the target text.  Returns -1 if not found.
' ## Parameters:
' ##        TableObj - The Table to look for the text in
' ##        nColNum  - The Column to look in for the Text in sTarget
' ##        sTarget  - The String to find (do case insensitive search)
' ##        bMatchAll- If True entire contentText must match.
' ##                   If False any part of the ContentText may contain sTarget for success
' ##        sDescr   - Text for logging meaningful messages. (Not used at this time)
' ## Returns:
' ##        -1 (if the sTarget is not found)
' ##        integer Row Number of row where sTarget was found in nColNum cell
' ## Assumptions:
' ##        Row 0 of the table is the captions of the columns so this function
' ##        does not search in it.
' ############################################################################
Public Function FindTextInTableColumn(TableObj, nColNum, sTarget, bMatchAll, sDescr) 

Dim nNumRows, nChildCount

  'nChildCount = TableObj.ChildCount
  nNumRows = CountTableRows(TableObj) - 1 ' -1 because CountTableRows is like listcount and arrays are zero (0) based

  ' Assume Row 0 is the Header/Caption for the table - don't search it
  for i = 1 to nNumRows
    if WaitChildXSecs(TableObj, "Cell(" & i & ", " & nColNum & ")", .1, False, "Make Sure Cell(" & i & ", " & nColNum & ") Exists before accessing it") then
      if instr(1, TableObj.Cell(i, nColNum).contentText, sTarget, vbTextCompare) > 0 then
        if bMatchAll then
          if ucase(TableObj.Cell(i, nColNum).contentText) = ucase(sTarget) then
            FindTextInTableColumn = i
            Exit Function
          end if
        else
          FindTextInTableColumn = i
          Exit Function
        end if
      end if
    End If
  next
  FindTextInTableColumn = -1
  
End Function

' ############################################################################
' ## Name: CountTableRows Author: Ben A. Schultz 04/19/2013
' ## Purpose:
' ##        This function was created to deal with Tables with incongruent row 
' ## lengths.  This anomoly makes the Childcount property useless in calculating
' ## row counts in tables since there can be missing cells in rows in WebTables
' ## Parameters:
' ##        TableObj (Table to count the number of rows in)
' ## Returns:
' ##        integer number of rows in Table.
' ############################################################################
Public Function CountTableRows(TableObj)

log.Enabled = False
for i = 0 to (TableObj.ChildCount - 1)
  ' The assumption is that every Table has Column # 0
  ' Let's use WaitChildXSecs to see if the Cell exists
  if Not WaitChildXSecs(TableObj, "Cell(" & i & ", 0)", .1, False, "Check if Cell(" & i & ", 0) Exists") then
    CountTableRows = i
    log.Enabled = True
    exit function
  end if
next
CountTableRows = TableObj.ChildCount
log.Enabled = True

End Function

' ##########################################################################
' ##########################################################################

' ##########################################################################
' ##########################################################################
' ## FindMultiObject 8/23/2013 Ben A. Schultz (BAS)
' ## Purpose:
' ##        This function will search for any ObjectType with contains the
' ##        RootId in the the ObjectIdentifier text and optionally
' ##        contains the SecondaryIdCheck.
' ##        and (also optionally) does not contain NotInId1 and NotInId2.
' ##        NOTE if SecondaryIDCheck, NotInId1, NotInId2 are "" then they
' ##             will be ignored (ie. Optional)
' ## Parameters:
' ##          Parent           (The Parent Object to search)
' ##          RootID           (The text to search for in ObjectIdentifier)
' ##          SecondaryIDCheck (Optional: Send "" if not needed --
' ##                              2nd string to match in ObjectIdentifier)
' ##          NotInId1         (Optional: Send "" if not needed --
' ##                              ObjectIdentifier should NOT have this text)
' ##          NotInId2         (Optional: Send "" if not needed --
' ##                              ObjectIdentifier should NOT have this text)
' ## Returns:
' ##        Nothing Object if not found.
' ##        The object that matches the criteria
' ##########################################################################
' ##########################################################################
Public Function FindMultiObject(Parent, ObjectType, RootID, SecondaryIDCheck, NotInId1, NotInId2)

dim objList

objList = Parent.FindAllChildren("ObjectType", ObjectType, 1)

if not IsArray(objList) then
  Set FindMultiObject = Nothing
  exit function
end if
for each x in objList
  ' Check for the RootID 1st
  if instr(1, x.ObjectIdentifier, RootID, vbTextCompare) > 0 then
    bFound = True
  else
    bFound = False
  end if
  
  ' Now if RootID Passed check SecondaryIDCheck
  if bFound then
    if len(trim(SecondaryIDCheck)) > 0 then
     ' Check for Hit On SecondaryIDCheck
      if instr(1, x.ObjectIdentifier, SecondaryIDCheck, vbTextCompare) > 0 then
        bFound = True
      else
        bFound = True
      end if
    end if
  end if
  
  ' If we are still good Check for NotInId1
  if bFound then
    if len(Trim(NotInId1)) > 0 then
      if instr(1, x.ObjectIdentifier, NotInId1, vbTextCompare) = 0 then
        bFound = True
      else
        bFound = False
      end if
    End if
  end if               
  
  ' If we are still good Check for NotInId2
  if bFound then
    if len(Trim(NotInId2)) > 0 then
      if instr(1, x.ObjectIdentifier, NotInId2, vbTextCompare) = 0 then
        bFound = True
      else
        bFound = False
      end if
    End if
  end if
  
  ' Now the decision is made
  if bFound then
    ' This is it return this object
    Set FindMultiObject = x
    exit function
  end if
  ' Otherwise go to the next item and check it
next

' We did not find the object return Nothing
set FindMultiObject = Nothing

end function ' FindMultiObject
' ##########################################################
' ##########################################################

Public Sub UnitTest_FindMultiObject()

dim ThisObj

set ThisObj = FindMultiObject(Aliases.formRedemptionformArizona.Article(1).Panel(1), "TextNode", "lastSentEmail", "", "_", "date")

if ThisObj is Nothing then
  log.Warning "Did Not Find Object"
else
  log.Message "Found Object: " & ThisObj.ObjectIdentifier, _
              "Found Object: " & ThisObj.ObjectIdentifier & vbcr & _
              "Text: '" & ThisObj.contentText  & "'"
end if 

End Sub ' UnitTest_FindMultiObject
' ##########################################################
' ##########################################################

' ############################################################################
' ## CompareText 07/08/2013 Ben A. Schutlz(BAS)
' ## This function will compare the text within the TextObject (Actual) with
' ## the text in sTarg (Expected). TextType tells the function how to access
' ## the text in TextObj (.contentText, .Value, etc.
' ## Return Value: (Boolean) True if text matches (ie. sTarg contained in
' ##                         Text of TextObj.)
' ## Parameters: 
' ## - TextObj (Object) an Object under Test that contains Text
' ## - sTarg (String) The Expected value for the text (this check is NOT
' ##                  Case sensitive and the check is to see if the sTarg
' ##                  Text is contained in TextObj NOT an exact match!
' ## - nCompareType (Number) Level of Compare method:
' ##                          - 0 = Binary Exact Match (Case Sensative)
' ##                          - 1 = Exact Match (Case Insensative)
' ##                          - 2 = Binary Contains (Case Sensative)
' ##                          - 3 = Contains (Case Insensative)
' ## - bIgnoreCRs (Boolean) Replace EOLN characters with spaces in sActual before
' ##                        comparing.
' ## - TextType (String) An Indicator to this function on how to address
' ##                      the text in TextObj:
' ##                      - "ContentText" (.contentText)
' ##                      - "Value" (.Value)
' ##                      - "Src" (.Src) - For checking image source files
' ##                      - "outerHTML" (.outerHTML)
' ##                      - "innerHTML" (.innerHTML)
' ##                      - "innerText" (.innerText)
' ##                      - "Title" (.title)
' ##                      - "ClassName" (.ClassName)
' ##                      - "HRef" (.href)
' ##                      - "TEXT" (.text)
' ##                      - "TEXTCONTENT" (.textcontent)
' ## - sDescr (String) Text used to describe the object under text for 
' ##                    Logging purposes.
' ## - bLogWarning (Boolean) If True log a Warning on Failure ... otherwise
' ##                         log a message only. (Ignored in the case that
' ##                         the TextObj does not exist - always log a warning
' ##                         in this case!)
' ############################################################################
Public Function CompareText(TextObj, sTarg, nCompareType, bIgnoreCRs, TextType, sDescr, bLogWarning)

dim sActual
dim bResult
log.AppendFolder "Check Text in " & sDescr, "Check Text in " & sDescr
 
  Inc_TestCases 1
  if TextObj.Exists then
    ' Need to activate the Browser, but Activate method is not available
    ' Using HoverMouse method as a benign action to activate the page
    ' until a better method is found ... Don't want to log this action:
    log.Enabled = false
    TextObj.HoverMouse -1, -1
    log.Enabled = True
    'ScrollIntoView not always available so skipping this check
    'if not TextObj.VisibleOnScreen then
    '  ' Make Sure the Control is VisibleOnScreen for the Screenshot if Needed.
    '  TextObj.ScrollIntoView True
    'end if
    Select Case(ucase(TextType))
  
    Case "CONTENTTEXT"
      sActual = TextObj.contentText
    
    Case "VALUE"
      sActual = TextObj.Value
    
    Case "SRC"
      sActual = TextObj.Src
      
    Case "OUTERHTML"
      sActual = TextObj.outerHTML
      
    Case "INNERHTML"
      sActual = TextObj.innerHTML
    
    Case "INNERTEXT"
      sActual = TextObj.innerText
      
    Case "TITLE"
      sActual = TextObj.title
      
    Case "CLASSNAME"
      sActual = TextObj.ClassName
    
    Case "HREF"
      sActual = TextObj.href
      
    Case "TEXT"
      sActual = TextObj.text
      
    Case "TEXTCONTENT"
      sActual = TextObj.textContent
    
    Case Else
      sActual = "{Unknown Text Type]"
    End Select
    if bIgnoreCRs then
      if instr(1, sActual, vbCrLf) > 0 then
        sActual = replace(sActual, vbCrLf, " ")
      end if
      if instr(1, sActual, vbCr) > 0 then
        sActual = replace(sActual, vbCr, " ")
      end if
      if instr(1, sActual, vbLf) > 0 then
        sActual = replace(sActual, vbLf, " ")
      end if
      if instr(1, sActual, Chr(10)) > 0 then
        sActual = replace(sActual, Chr(10), " ")
      end if
    end if
    if sActual <> "{Unknown Text Type]" then
      Select Case(nCompareType)
        Case 0
          ' Binary Exact Match (Case Sensitive)
          bResult = (sActual = sTarg)
          sNote = "NOTE: This is an Exact Match Check ... Case Sensitive and " & vbCr & _
                  "      Entire Actual MUST match Entire Expected."
        Case 1
          ' Exact Match (Case InSensitive)
          bResult = (Ucase(sActual) = Ucase(sTarg))
          sNote = "NOTE: This is an Exact Match Check ... Case InSensitive and " & vbCr & _
                  "      Entire Actual MUST match Entire Expected."
        Case 2
          ' Binary Contains (Case Sensitive)
          bResult = (Instr(1, sActual, sTarg, vbBinaryCompare) > 0)
          sNote = "NOTE: This is a Binary Contains Check ... Case Sensitive and " & vbCr & _
                  "      Expected must be contained in Actual."
        Case 3
          ' Contains (Case InSensitive)
          bResult = (Instr(1, sActual, sTarg, vbTextCompare) > 0)
          sNote = "NOTE: This is a Contains Check ... Case InSensitive and" & vbCr & _
                  "      Expected must be contained in Actual."
        case Else
          ' Default: Contains (Case InSensitive)
          bResult = (Instr(1, sActual, sTarg, vbTextCompare) > 0)
          sNote = "NOTE: This is a Contains Check ... Case InSensitive and" & vbCr & _
                  "      Expected must be contained in Actual."
      End Select
      if bResult then
        log.Message "CompareText: " & sDescr & " Text CheckPoint Passed!", _
                    "CompareText: " & sDescr & " Text CheckPoint Passed!" & vbCr & _
                    "Expected: '" & sTarg & "'" & vbCr & _
                    "Actual  : '" & sActual & "'" & vbCr & _
                    sNote
        WriteCSVLine "4.1.x", "Check Text: " & sDescr, "Pass", Now(), "TextCompare", sTarg, sActual
        CompareText = True
      else
        if bLogWarning then
          log.Warning "CompareText: " & sDescr & " Text CheckPoint Failed!", _
                      "CompareText: " & sDescr & " Text CheckPoint Failed!" & vbCr & _
                      "Expected: '" & sTarg & "'" & vbCr & _
                      "Actual  : '" & sActual & "'" & vbCr & _
                      sNote
          WriteCSVLine "4.1.x", "Check Text: " & sDescr, "Fail", Now(), "TextCompare", sTarg, sActual
        else
          log.Message "CompareText: " & sDescr & " Text CheckPoint Failed!", _
                      "CompareText: " & sDescr & " Text CheckPoint Failed!" & vbCr & _
                      "Expected: '" & sTarg & "'" & vbCr & _
                      "Actual  : '" & sActual & "'" & vbCr & _
                      sNote
        end if
        CompareText = False
        ASCII_Map sActual
        ASCII_Map sTarg
      end if
    else
      if bLogWarning then
        log.Warning "CompareText: " & sDescr & " Cannot Do Check! Unknown TextType!", _
                    "CompareText: " & sDescr & " Cannot Do Check! Unknown TextType!" & vbCr & _
                    "The Parameter TextType contains a value not yet supported by the" & vbCr & _
                    "CompareText Script Function!" & vbCr & _
                    "Please contact the Script Developer!"
        WriteCSVLine "4.1.x", "Check Text: " & sDescr, "Fail", Now(), "TextCompare", sTarg, sActual
      else
         log.Message "CompareText: " & sDescr & " Cannot Do Check! Unknown TextType!", _
                    "CompareText: " & sDescr & " Cannot Do Check! Unknown TextType!" & vbCr & _
                    "The Parameter TextType contains a value not yet supported by the" & vbCr & _
                    "CompareText Script Function!" & vbCr & _
                    "Please contact the Script Developer!"
      end if
      CompareText = False
    end if
  else
    ' If the object does not exist ignore the gLogWarning parameter
    log.Warning "CompareText: TextObj " & sDescr & " Does not Exist!", _
                "CompareText: TextObj " & sDescr & " Does not Exist!"
    WriteCSVLine "4.1.x", "Check Text: " & sDescr, "Fail", Now(), "TextCompare", sTarg, sActual
    CompareText = False
  End If
log.PopLogFolder

End Function ' CompareText
' ##########################################################
' ##########################################################

'Public Function CompareText(TextObj, sTarg, nCompareType, TextType, sDescr, bLogWarning)
Public Sub UnitTest_CompareText()

if CompareText(Aliases.lblLoginHeaderThankYouForPurchase, _
               "Thank You for Your purchase", _
               3, "ContentText", "Login Page Thank You Message", True) then
  log.Message "Success"
else
  log.Message "Failure"
end if


End Sub ' UnitTest_CompareText
' ##########################################################
' ##########################################################