'USEUNIT FileSystemUtils
'USEUNIT GeneralUtils

' ##################################################################
Const URL = "http://wsf.cdyne.com/WeatherWS/Weather.asmx?"
' XML Records will be in the following arrays
Public sXMLNode()
Public sXMLParentNode()
Public sXMLNodeLevel()
Public sXMLNodeType()
Public sXMLNodeValue()


Public Sub UnitTest_WeatherSoapWebService()

WeatherSoapWebService "50322"
UnitTest_XNodes_API


End Sub ' UnitTest_WeatherSoapWebService
' ##########################################################
' ##########################################################

Public Sub UnitTest_XNodes_API


DumpXMLRecs

log.Message GetNodeValues("City")
log.Message GetNodeValues("State")
log.Message "Children for Forcast where Date = 2014-01-10", GetAllChildNodes("Forecast", "Date", "2014-01-10")
Log.Message "Children for ForcastResult with no Criteria", GetAllChildNodes("ForecastResult", "", "") 


End Sub ' UnitTest_XNodes_API
' ##########################################################
' ##########################################################

' ##########################################################
' ##########################################################
' ## WeatherSoapWebService
' ## This is just an example of calling a web service and 
' ## retrieving the XML text to be processed.
' ##########################################################
' ##########################################################
public sub WeatherSoapWebService(Zip)
' Create the http request text
Dim strSoapReq
log.AppendFolder "Get WebService Response"
strSoapReq = "<soapenv:Envelope xmlns:soapenv=" & chr(34) & "http://schemas.xmlsoap.org/soap/envelope/" & chr(34) & " xmlns:weat=" & chr(34) & "http://ws.cdyne.com/WeatherWS/" & chr(34) & ">" & vbcrlf & _
            vbtab & "<soapenv:Header/>" & vbcrlf & _
            vbtab & "<soapenv:Body>" & vbcrlf &  _
            vbtab  & vbtab & "<weat:GetCityForecastByZIP>" & vbcrlf &  _
            vbtab & vbtab & vbtab & "<!--Optional:-->" & vbcrlf &  _
            vbtab & vbTab & "<weat:ZIP>" & Zip & "</weat:ZIP></weat:GetCityForecastByZIP>" & vbcrlf &  _
            vbtab & "</soapenv:Body>" & vbcrlf &  _
            "</soapenv:Envelope>"
log.Message "Soap Request", strSoapReq

Dim oHttp
Dim strResult
Set oHttp = CreateObject("Msxml2.XMLHTTP")
oHttp.open "POST", URL, false
oHttp.setRequestHeader "Content-Type", "text/xml"
oHttp.send strSoapReq
strResult = oHttp.responseText
Set objResult = oHttp.responseXML
sCityList = GetAllEncasedText(strResult, "<City>", "</City>", vbTextCompare, ",")
sStateList = GetAllEncasedText(strResult, "<State>", "</State>", vbTextCompare, ",")
log.Message "Soap Response:" & sCityList & ", " & sStateList, strResult
log.PopLogFolder

' parse XML in strResult
ParseXML strResult

end sub ' WeatherSoapWebService
' ##########################################################
' ##########################################################

Public Function GetNextNode(nStart, sTxt)

dim nBeginNextNode
dim nEndNextNode
dim nLenNode

nBeginNextNode = instr(nStart, sTxt, "<")
if nBeginNextNode <= 0 then
  GetNextNode = "-1"
  if Project.Variables.gbDebug then
    log.Message "GetNextNode: No more nodes in text after pos: " & nStart, _
                "GetNextNode: No more nodes in text after pos: " & nStart
  end if
  exit function
end if

nEndNextNode = Instr(nBeginNextNode, sTxt, ">")
' Calculate the number of characters between < and >
nLenNode = nEndNextNode - nBeginNextNode - 1
' 1 2 3 4 5 6 7 8 9 
' x x x < x x x >
' we will return the text between < and >
if nLenNode > 0 then
  nStart = nEndNextNode + 1
  GetNextNode = mid(sTxt, nBeginNextNode + 1, nLenNode)
else
  ' Don't think this can happen in properly formed XML, but if it does return "{{NotFound}}"
  GetNextNode = "{{NotFound}}"
end if
End Function ' GetNextNode
' ##########################################################
' ##########################################################

Public Function EndNode(s)

if left(s,1) = "/" then
  EndNode = True
  exit function
else
  EndNode = False
end if

End Function ' EndNode
' ##########################################################
' ##########################################################

Public Sub DumpXMLRecs()

sOut = ""
for i = 0 to UBound(sXMLNode)
  sOut = sOut & string(CInt(sXMLNodeLevel(i)), vbTab) & i & "-" & sXMLNode(i)
  if sXMLNodeType(i) = "D" then
    sOut = sOut & ":" & sXMLNodeValue(i)
  elseif sXMLNodeType(i) = "P" then
    sOut = sOut & ">"
  end if
  if sXMLParentNode(i) <> "-1" then
    if sXMLParentNode(i) > 0 then
      sNPath = GetNodePath(sXMLParentNode(i))
    else
      sNPath = ""
    end if
    if sNPath <> "" then
      sOut = sOut & " (Parent: (" & sXMLParentNode(i) & "-" & sXMLNode(sXMLParentNode(i)) & ") (NodePath: '" & sNPath & "' )" & vbCr
    else
      sOut = sOut & " (Parent: (" & sXMLParentNode(i) & "-" & sXMLNode(sXMLParentNode(i)) & ") )" & vbCr
    end if
  else
    sOut = sOut & vbCr
  end if
next
log.Message "XML Record Dump", sOut
  

End Sub ' DumpXMLRecs
' ##########################################################
' ##########################################################
Public Function GetNodePath(nPIdx)

sRetPath = GetJustNodeName(sXMLNode(nPIdx))
nNewPIdx = nPIdx
do
  nNewPIdx = sXMLParentNode(nNewPIdx)
  if nNewPIdx > 0 then
    sRetPath = GetJustNodeName(sXMLNode(nNewPIdx)) & "." & sRetPath
  end if
loop until (nNewPIdx = 0)
GetNodePath = sRetPath

End Function ' GetNodePath
' ##########################################################
' ##########################################################

Public Function GetJustNodeName(s)

if instr(1,s, " ") > 0 then
  GetJustNodeName = left(s, instr(1, s, " ") - 1)
else
  GetJustNodeName = s
end if

End Function ' GetJustNodeName
' ##########################################################
' ##########################################################
' ## GetNodeValues  Created: 04/14/2014  Author: Ben A. Schultz
' ## This functions can be used to get all the nodes in the
' ## XML records that have the name sField
' ## The Return value is a comma delimted list of the
' ## values in the XML for the sField field.
' ##########################################################
' ##########################################################
Public Function GetNodeValues(sField)

  sRetValue = ""
  for j = 0 to ubound(sXMLNode)
    if ucase(sXMLNode(j)) = ucase(sField) then
      ' Node Value Found
      if sRetValue = "" then
        SRetValue = sXMLNodeValue(j)
      else
        sRetValue = sRetValue & "," & sXMLNodeValue(j)
      end if
    end if
  next
  GetNodeValues = sRetValue
    

End Function ' GetNodeValues
' ##########################################################
' ##########################################################
Public Function GetChildNodeRange(sParentNode, nStartPos)

  nBeginChildren = -1
  sRetValue = ""
  for i = nStartPos to UBound(sXMLNode)
    
    ' 1st find the Parent
    if sXMLNode(i) = sParentNode then
      ' This is the parent node we want Set the nLevel Value
      nLevel = sXMLNodeLevel(i)
      nBeginChildren = i + 1
      nEndChildren = -1
      for j = (i+1) to Ubound(sXMLNode)
        if nLevel = sXMLNodeLevel(j) then
          nEndChildren = j - 1
          exit for
        end if
      next
      if nEndChildren = -1 then
        nEndChildren = Ubound(sXMLNode)
      end if
      sRetValue = nBeginChildren & "," & nEndChildren
      exit for
    end if
  next
  GetChildNodeRange = sRetValue
  
End Function ' GetChildNodeRange
' ##########################################################
' ##########################################################

Public Function MeetsCriteria(sCritFld, sCritValue, nBeg, nEnd)

' No Criteria = True
if sCritFld = "" then
  MeetsCriteria = True
  exit Function
end if

for i = nBeg to nEnd
  if ucase(sXMLNode(i)) = ucase(sCritFld) then
    ' check this field
    if sXMLNodeValue(i) = "" then
      if sCritValue = "" then
        MeetsCriteria = True
      else
        MeetsCriteria = False
      End if
    else
      if instr(1, sXMLNodeValue(i), sCritValue, vbTextCompare) > 0 then
        MeetsCriteria = true
      else
        MeetsCriteria = False
      end if
    end if
    exit function
  end if
next
MeetsCriteria = False

End Function ' MeetsCriteria
' ##########################################################
' ##########################################################
' ## GetAllChildren Created: 04/14/2014 Author: Ben A. Schultz
' ## This function can be used to retrieve sections in the 
' ## XML structure and return the data in the following format:
' ## [Field1Path],[Field1Value]vbCrLf
' ## [Field2Path],[Field2Value]vbCrLf
' ## . . .
' ## [FieldNPath],[FieldNValue]vbCrLf
' ## If sCritFld parameter is "" then only the 1st section
' ## will be returned. When sCritFld is populated, if the 
' ## Field does not contain sCritValue (case insensative)
' ## then we will get then next section matching sParent.
' ## If nothing is found we return ""
' ##########################################################
' ##########################################################
public Function GetAllChildNodes(sParent, sCritFld, sCritValue)

dim sPList(100)
for i = 0 to 100
  sPlist(i) = ""
next
sPlist(0) = sParent
sRange = GetChildNodeRange(sParent, 1)
sRetValue = ""
do while sRange <> ""
  if instr(1, sRange, ",") > 0 then
    nBeg = cint(left(sRange, instr(1, sRange, ",") - 1))
    nEnd = cint(mid(sRange, instr(1,sRange, ",") + 1))
    nRootLevel = sXMLNodeLevel(nBeg - 1)
    if MeetsCriteria(sCritFld, sCritValue, nBeg, nEnd) then
      sRetValue = ""
      for i = nBeg to nEnd
        if sXMLNodeType(i) = "P" then
          nPlistIdx = sXMLNodeLevel(i) - nRootLevel
          sPList(nPlistIdx) = GetJustNodeName(sXMLNode(i))
          if sPlist(nPlistIdx+1) <> "" then
            sPlist(nPlistIdx+1) = ""
          end if 
        else
          if sRetValue <> "" then
            sRetValue = sRetValue & BuildDotNameFromArray(sPlist) & "." & GetJustNodeName(sXMLNode(i)) & _
                                    "," & sXMLNodeValue(i) & vbcrlf
          else
            sRetValue = BuildDotNameFromArray(sPlist) & "." & GetJustNodeName(sXMLNode(i)) & _
                                    "," & sXMLNodeValue(i) & vbcrlf
          end if
        end if
      next
      sRange = ""
    else
      sRange = GetChildNodeRange(sParent, nEnd + 1) 
    end if
  end if
loop
GetAllChildNodes = sRetValue

End Function ' GetAllChildNodes
' ##########################################################
' ##########################################################
Public Function BuildDotNameFromArray(sList)

sRet = ""
for each x in sList
  if x <> "" then
    if sRet = "" then
      sRet = x
    else
      sRet = sRet & "." & x
    end if
  else
    exit for
  end if
next

BuildDotNameFromArray = sRet

End Function ' BuildDotNameFromArray
' ##########################################################
' ##########################################################
' ## ParseXML Created: 04/14/2014   Author: Ben A. Schultz
' ## This routine will parse an XML stream (sXML) into a 
' ## virtual record system (implemented with a set of arrays
' ## each array corresponding to a field of data:
' ## ArrayName            Description
' ## ---------            -----------
' ## sXMLNode()           Name of the XNode
' ## sXMLParentNode()     Array index to this XNode's Parent
' ## sXMLNodeLevel()      The Hierachy level of This node
' ## sXMLNodeType()       P for Parent, D for Data
' ## sXMLNodeValue()      Data Value (only populated on Type D XNodes)
' ## 
' ## After calling ParseXML there are certain API functions you 
' ## can call to retrieve data from the virtual record system:
' ## GetNodeValues()      This is a simple find that gives a 
' ##                      comma delimited list of values of 
' ##                      a field (no criteria)
' ## GetAllChildNodes()   This will return a list of all
' ##                      child nodes with
' ##                      a relative Xnode path and a value.
' ##########################################################
' ##########################################################
Sub ParseXML(sXML)

dim ParentIdxStack(), ParentNameStack()
' Variables for processing the XML
dim nCurrentNLevel : nCurrentNLevel = 0
dim nCurrentPos, nPrevPos, nCurrParent
dim bRecEmpty
log.AppendFolder "ParseXML"
InitStack ParentIdxStack
InitStack ParentNameStack

RedimArrays 0, sXMLNode, sXMLParentNode, sXMLNodeLevel, sXMLNodeType, sXMLNodeValue, _
              "", "", ""
bRecEmpty = True
nCurrentPos = 1
do
  nPrevPos = nCurrentPos
  sNode = GetNextNode(nCurrentPos, sXML)
  ' sNode is -1 when another node was not found
  if sNode <> "-1" then
    if EndNode(sNode) then
      ' When we encounter an end node we need to capture any data that may be 
      ' between the begin and end node 
      if ((nCurrentPos - Len(sNode) - 2) > nPrevPos) then
        sData = mid(sXML, nPrevPos, nCurrentPos - Len(sNode) -2 - nPrevPos)
        LoadArrays Ubound(sXMLNode), sXMLNodeType, "D", _
                                     sXMLNodeValue, sData, _
                                     "", "", "", "", "", "", "", "", "", "", "", ""
        log.Message "Data: '" & sData & "'", "Data: '" & sData & "'"
      end if 
      log.Message "End Node: '" & sNode, "End Node: '" & sNode
      nCurrentNLevel = nCurrentNLevel - 1
      log.message "End Parent: '" & PopStack(ParentNameStack) & "' (Level " & nCurrentNLevel & ") Index: " & PopStack(ParentIdxStack)
      
    else
      ' here is where we need to deal with Parent nodes and Levels
      PushStack ParentNameStack, sNode
      nCurrentNLevel = nCurrentNLevel + 1
      if bRecEmpty then
        PushStack ParentIdxStack, 0
        ' Public Sub LoadArrays(idx, A1, T1, A2, T2, A3, T3, A4, T4, A5, T5, A6, T6, A7, T7, A8, T8)
        LoadArrays 0, sXMLNode, sNode, _
                      sXMLParentNode, "-1", _
                      sXMLNodeLevel, nCurrentNLevel, _
                      sXMLNodeType, "P", _
                      sXMLNodeValue, "", _
                      "", "", "", "", "", ""
        bRecEmpty = False
      else
        
        RedimArrays Ubound(sXMLNode) + 1, sXMLNode, sXMLParentNode, sXMLNodeLevel, _
                      sXMLNodeType, sXMLNodeValue, _
                      "", "", ""
        LoadArrays Ubound(sXMLNode), sXMLNode, sNode, _
                                     sXMLParentNode, PeekStack(ParentIdxStack), _
                                     sXMLNodeLevel, nCurrentNLevel, _
                                     sXMLNodeType, "P", _
                                     sXMLNodeValue, "", _
                                     "", "", "", "", "", ""
        PushStack ParentIdxStack, UBound(sXMLNode)
      end if
                      
      log.Message "Begin Node: '" & sNode & "' (Level " & nCurrentNLevel & ")", "Begin Node: '" & sNode & "' (Level " & nCurrentNLevel & ")"
      if right(sNode, 1) = "/" then
        log.Message "****************** Special Node '" & sNode & "' Closing node right away! ******************", _
                    "****************** Special Node '" & sNode & "' Closing node right away! ******************"
        ' this is am empty data node ... end this node
        LoadArrays Ubound(sXMLNode), sXMLNodeType, "D", _
                                     sXMLNodeValue, "", _
                                     "", "", "", "", "", "", "", "", "", "", "", ""
        log.Message "Data: ''", "Data: ''"
        nCurrentNLevel = nCurrentNLevel - 1
        log.message "End Parent: '" & PopStack(ParentNameStack) & "' (Level " & nCurrentNLevel & ") Index: " & PopStack(ParentIdxStack)
      end if
    end if
  else
    log.Message "No more Nodes"  
  end if
loop until (sNode = "-1")
log.PopLogFolder

End Sub

Public Sub DDT_DumpXLSToLog()

DDT.ExcelDriver Files.FileNameByName("DDC_Auto_Tests_xls"), "Sheet1", False
DDT.CurrentDriver.DriveMethod("Soap.DDTDriver_DumpXLSToLog")

End Sub

Public Sub DDTDriver_DumpXLSToLog

Log.Message ddt.CurrentDriver.Value("Email") & ", " & _
            ddt.CurrentDriver.Value("ZipCode") & ", " & _
            ddt.CurrentDriver.Value("OrderNum") & ", " & _
            ddt.CurrentDriver.Value("Browser") 

End Sub

Public Sub RunSoapTest()

Dim strParams, strCMDParams

  strParams = "USD,EUR"
  strParams = "USD,SVC"
  
  MyWriteFile "c:\Users\TestVM\Desktop\suitest\CurrencyDataSource.txt", strParams
  do while (not MyKillFile("c:\Users\TestVM\Desktop\suitest\CurrencyDataSourceExport.txt"))
    aqUtils.Delay 100
  loop
  
  strCMDParams = "-a -s " & chr(34) &  "CurrencyTest" & chr(34) & _
                 " -c CurrencyTest -r -f " & chr(34) & "C:\Users\TestVM\Desktop\suitest" & chr(34) & " -o -R " & chr(34) & "TestSuite Report" & chr(34) & _
                 " -F " & chr(34) & "txt" & chr(34) & " -E Default " & chr(34) & "C:\Users\TestVM\Desktop\Weather-soapui-projectPASS.xml" & chr(34)
  
  log.Message "TestRunner Parameters:", strCMDParams
 TestedApps.testrunner.Params.ActiveParams.CommandLineParameters = strCMDParams
 log.Message TestedApps.testrunner.Params.ActiveParams.CommandLineParameters
 TestedApps.testrunner.Run
  do while (not MyFileExists("c:\Users\TestVM\Desktop\suitest\CurrencyDataSourceExport.txt"))
    aqUtils.Delay 100
  loop
  sTxt = ReadFileFromDisk("c:\Users\TestVM\Desktop\suitest\CurrencyDataSourceExport.txt")
  log.Message "SoapUI results", sTxt
    
End Sub
