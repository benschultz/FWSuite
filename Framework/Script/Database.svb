'USEUNIT FileSystemUtils
'USEUNIT GeneralUtils

Option Explicit

' ##################################################################################################################################################################################################################################
' ##                           FILE HEADER
' ##################################################################################################################################################################################################################################
' ## File Name: Database.svb
' ## Path:      <Update once Deployed>
' ## Reference: <Not Sure ... need Project Number>
' ##
' ## (C) Copyright Ventyx, an ABB Company, 2014
' ## 
' ##################################################################################################################################################################################################################################
' ##                         FILE DESCRIPTION                                                                                                                                                                                                       
' ##################################################################################################################################################################################################################################
' ## Database API framework
' ## Description: Functions to connect to and maniplulate databases
' ##
' ## Function List:
' ##          GetConnStr
' ##          DBQueryToCSV
' ##          WriteCSVRecordset
' ##          CreateRecordSet
' ##          CloseRecordset
' ##          GetField
' ##          GetFieldList
' ##          GetValueList
' ##          AddRecordToDBTable
' ##          UpdateCurrentDataRow
' ##          PrepValuesForDB
' ##################################################################################################################################################################################################################################
' ##################################################################################################################################################################################################################################

'*************************************************
'*                   DATA DECLARATIONS
'*************************************************
Public objConn
Public adoRS
Public RSFields

' ##########################################################
' ##########################################################

'*****************************************************************************
'*        FUNCTION DECLARATION
'*****************************************************************************
'* Name:         GetConnStr
'*
'* Purpose:      Centralize Database Connection string specifications
'* Assumptions:  Environmental settings are used to determine which Database
'*               to use.  These setting are in Project.variables.
'* Inputs:       None (Potentially global variables for environment)
'* Returns:      The connection string needed to access a DB.
'*****************************************************************************
'*       FUNCTION DESCRIPTION
'*****************************************************************************
'* Centralize Database Connection string specifications
'*****************************************************************************
Public Function GetConnStr()

  GetConnStr = "Driver={SQL Server};Server=ATLDEVSQL10,1433;Database=DDS_DEV; uid=; pwd=; "

end function ' GetConnStr
' ##########################################################
' ##########################################################
'*****************************************************************************
'*        SUBROUTINE DECLARATION
'*****************************************************************************
'* Name:         DBQueryToCSV
'*
'* Purpose:     Generate and ADO Recordset and Store the results in a CSV file
'* Effects:     New .CSV file is generated with the results of the Query
'* Inputs:      sConnStr (Connection String - always from GetConnStr())
'*              sSQL (SQL to execute to create the recordset)
'*              boolStartDDT (Should we initiate a DDT on this file?) 
'* Returns:     string containing path to .XLS file
'*              (If boolStartDDT is True:
'*               Also starts the DDT on the file so the calling routine
'*               will be responsible for processing the records and doing
'*               DDT.CloseDriver DDT.CurrentDriver.Name ---
'*               Use DDT.CurrentDriver.First, DDT.CurrentDriver.EOF, 
'*               DDT.CurrentDriver.Value("FieldName") and
'*               DDT.CurrentDriver.Next) 
'* 
'*****************************************************************************
'*       SUBROUTINE DESCRIPTION
'*****************************************************************************
'* Generate and ADO Recordset and Store the results in a CSV file
'****************************************************************************
Public Function DBQueryToCSV(sConnStr, sSQL, boolStartDDT)

Dim rstLocal
Dim sCSVOut
Dim strRetValue
dim objRetValue

CreateRecordSet rstLocal, sConnStr, sSQL

' Create a string containing CSV formatted text
' to write to the csv file.  The string will 
' contain all the records in the recordset.
sCSVOut = GetFieldList(rstLocal, ",") & vbCrLf
do while (not rstLocal.EOf)
  sCSVOut = sCSVOut & GetValueList(rstLocal, ",")
  rstLocal.Next
loop
'Test Data for unit test without SQL database
'sCSVOut = "Field1,Field2,Field3" & vbCrLf & _
'          "Test1, Test2, Test3" & vbCrLf & _
'          "Row2, Row3, Row4" & vbcrlf & _
'          "Junk1, Junk2, Junk3" & vbCrLf
strRetValue = WriteCSVRecordset(sCSVOut)
log.Message "Wrote SQL Results to CSV file: " & _
            strRetValue, "SQL CODE:" & vbcr & sSQL

'=======================================================================
' boolStartDDT ?
' This gives the calling routine the option to start reading the .CSV
' file right away or just capture the full path to the .CVS file and 
' initiate the DDT at a later time manually.
if boolStartDDT then
  DDT.CSVDriver(strRetValue)
end if
'=======================================================================

' Return the full path to newly created .CSV file
DBQueryToCSV = strRetValue 

set rstLocal = Nothing

End Function ' DBQueryToCSV

Public Sub Test_DBQueryToCSV()

Dim DDT_Data

DDT_Data = DBQueryToCSV(GetConnStr(), "Test this SQL")
DDT.CurrentDriver.First
do while not DDT.CurrentDriver.EOF
  log.Message DDT.CurrentDriver.Value("Field1") & ", " & DDT.CurrentDriver.Value("Field2") & ", " & DDT.CurrentDriver.Value("Field3")
  ddt.CurrentDriver.Next
loop
DDT.CloseDriver DDT.CurrentDriver.Name

End Sub


' ##########################################################
' ##########################################################
'*****************************************************************************
'*        SUBROUTINE DECLARATION
'*****************************************************************************
'* Name:         WriteCSVRecordset
'*
'* Purpose:     Writes the results from a Recordset to the reports directory
'*              in a sub-directory db_queries
'* Effects:     New .CSV file is generated with the results of the Query
'* Inputs:      strWriteThis  (Complete CSV text to write) 
'* Returns:     string containing path to .XLS file 
'* 
'*****************************************************************************
'*       SUBROUTINE DESCRIPTION
'*****************************************************************************
'* Writes the results from a Recordset to the reports directory
'* in a sub-directory db_queries
'****************************************************************************
Public Function WriteCSVRecordset(strWriteThis)

Dim sOutFile

' Check Project.Variables.gsReportDir exists (Create it if it doesn't)
if not MyDirExists(Project.Variables.gsReportDir) then
  if not MyCreateDir(Project.Variables.gsReportDir) then
    log.Error "Cannot Create Report Directory: '" & Project.Variables.gsReportDir & "'", _
              "Cannot Create Report Directory: '" & Project.Variables.gsReportDir & "'" & vbCr & _
              "Please make sure Project.Variables.gsReportDir is setuup correctly" & vbCr & _
              "and the the parent directory tree exists"
    runner.Stop
  end if
end if

' Check that the db_queries sub-directory exists
if not MyDirExists(Wack(Project.Variables.gsReportDir) & "db_queries") then
  if not MyCreateDir(Wack(Project.Variables.gsReportDir) & "db_queries") then
    log.Error "Cannot Create db_queries Directory: '" & Wack(Project.Variables.gsReportDir) & "db_queries" & "'", _
              "Cannot Create db_queries Directory: '" & Wack(Project.Variables.gsReportDir) & "db_queries" & "'" & vbCr & _
              "Please make sure Project.Variables.gsReportDir is setuup correctly" & vbCr & _
              "and the the parent directory tree exists"
    runner.Stop
  End If
End If

' Get Unique file name for this file
sOutFile = CreateFilename(Wack(Project.Variables.gsReportDir) & "db_queries" , _
                          "sqlResults_", "csv")
if Not MyWriteFile(sOutFile, strWriteThis) then
  log.Warning "Could not write db_query file: '" & sOutFile & "'", _
              "Could not write db_query file: '" & sOutFile & "'"
End If
WriteCSVRecordset = sOutFile
              
End Function ' WriteCSVRecordset
' ##########################################################
' ##########################################################
'*****************************************************************************
'*        SUBROUTINE DECLARATION
'*****************************************************************************
'* Name:         CreateRecordSet
'*
'* Purpose:      Generate an ADO Recordset
'* Assumptions:  Output Recordset has been defined in the calling routine
'*               sConnStr is ALWAYS GetConnStr() in the calling routine
'* Effects:      rstIn is populated with db records in the calling routine
'* Inputs:       rstIn (Output Recordset)
'*               sConnStr (Connection String - always from GetConnStr())
'*               sSQL (SQL to execute to create the recordset)
'* Returns:      The ADO Recordset in the rstIn output variable
'* TODO:         Needs to have exception handling added
'*****************************************************************************
'*       SUBROUTINE DESCRIPTION
'*****************************************************************************
'* Create an ADO Recordset
'****************************************************************************
Public Sub CreateRecordSet(rstIn, sConnStr, sSQL)

'log.AppendFolder "CreateRecordSet:", "Create a RecordSet using:" & vbcr & _
'                 "Connection String: '" & sConnStr & "'" & vbCr & _
'                 "SQL Query:" & vbcr & "'" & sSQL & "'"
  'log.Message "Create DB Connection:", "Create DB Connection"
  Set objConn = CreateObject("ADODB.Connection")
  'log.Message "Create Recordset", "Create Recordset"
  Set rstIn = CreateObject("ADODB.Recordset")
'  if bMakeEditable then
'    'log.Message "Make Recordset Editable.", "Make Recordset Editable"
'    rstIn.CursorType = adOpenKeyset
'    rstIn.LockType = adLockOptimistic
'  End if
  'log.Message "Open DB Connection:", "Open DB Connection Using:" & vbCr & _
  '            "Connection String: '" & sConnStr & "'"
  objConn.Open sConnStr

  'log.Message "Open Recordset:", "Open Recordset Using:" & vbCr & _
  '            "SQL Query:" & vbCr & "'" & sSQL & "'"
  rstIn.Open sSQL, objConn
  if objConn.Errors.Count > 0 then
    log.Warning "Error: " & Err.SQLState & ": " & Err.Description & " | " & Err.NativeError, _
                "Error: " & Err.SQLState & ": " & Err.Description & " | " & Err.NativeError
  else
    'log.Message "Recordset Successly Created!", "Recordset Successly Created!"
  end if
'log.PopLogFolder

End Sub ' CreateRecordSet
' ##########################################################
' ##########################################################

'*****************************************************************************
'*        SUBROUTINE DECLARATION
'*****************************************************************************
'* Name:         CloseRecordSet
'*
'* Purpose:      Close an ADO Recordset
'* Assumptions:  Recordset passed in rstIn is open in the calling routine
'* Effects:      Recordset is closed or warning is generated
'* Inputs:       rstIn (byRef Recordset)
'* Returns:      Nothing (RecordSet is closed - logs warning on failure) 
'* TODO:         Needs to have exception handling added
'*****************************************************************************
'*       SUBROUTINE DESCRIPTION
'*****************************************************************************
'* Close an Open ADO Recordset
'*****************************************************************************
Public Sub CloseRecordset(rstIn)

rstIn.Close
if objConn.Errors.Count > 0 then
  log.Warning "Error: " & Err.SQLState & ": " & Err.Description & " | " & Err.NativeError, _
              "Error: " & Err.SQLState & ": " & Err.Description & " | " & Err.NativeError
else
  'log.Message "Recordset Successly Closed!", "Recordset Successly Closed!"
end if
set rstIn = Nothing

End Sub ' CloseRecordset
' ##########################################################
' ##########################################################

'*****************************************************************************
'*        FUNCTION DECLARATION
'*****************************************************************************
'* Name:         GetField
'*
'* Purpose:      Get the value in a field in the current row of
'*               of an ADO Recordset
'* Assumptions:  rstIn is open and currently at the record needed
'* Effects:      NONE
'* Inputs:       rstIn (Recordset to get value in)
'*               s (Field name value to retrieve)
'* Returns:      Value in field 
'* TODO:         Needs to have exception handling added
'*****************************************************************************
'*       FUNCTION DESCRIPTION
'*****************************************************************************
'* Get the value in a field in the current row of an ADO Recordset
'*****************************************************************************
Public Function GetField(rstIn, s)

Dim x

for each x in rstIn.fields
  if ucase(x.name) = ucase(s) then
    GetField = x.value
    exit function
  end if
next
GetField = "[NotFound]"

End Function ' GetField
' ##########################################################
' ##########################################################

'*****************************************************************************
'*        FUNCTION DECLARATION
'*****************************************************************************
'* Name:         GetFieldList
'*
'* Purpose:      Get the Field name list from the rstIn record
'* Assumptions:  rstIn is open
'* Effects:      NONE
'* Inputs:       rstIn (Recordset to get fields from)
'*               sDelimiter (Delimter for return list)
'* Returns:      Delimited list of Field names
'* TODO:         Needs to have exception handling added 
'*****************************************************************************
'*       FUNCTION DESCRIPTION
'*****************************************************************************
'* Get the delimited Field name list from the rstIn record
'*****************************************************************************
Public Function GetFieldList(rstIn, sDelimiter)

dim x
dim sRet

sRet = ""
for each x in rstIn.Fields
  sRet = sRet & sDelimiter & x.name
next
sRet = mid(sRet, len(sDelimiter) + 1)

GetFieldList = sRet

End Function ' GetFieldList
' ##########################################################
' ##########################################################


'*****************************************************************************
'*        FUNCTION DECLARATION
'*****************************************************************************
'* Name:         GetValueLst
'*
'* Purpose:      Get the Field value list from the rstIn record
'* Assumptions:  rstIn recordset is open and current record is the one wanted
'* Effects:      NONE
'* Inputs:       rstIn (Recordset to get values from)
'*               sDelimiter (Delimter for return list)
'* Returns:      Delimited list of Field names 
'*****************************************************************************
'*       FUNCTION DESCRIPTION
'*****************************************************************************
'* Get the delimited Field value list from the rstIn record
'*****************************************************************************
Public Function GetValueList(rstIn, sDelimiter)

dim x
dim sRet

sRet = ""
for each x in rstIn.Fields
  if isnull(x.value) then
    sRet = sRet & sDelimiter & "[NULL]"
  else
    sRet = sRet & sDelimiter & x.value
  end if
next
sRet = mid(sRet, len(sDelimiter) + 1)

GetValueList = sRet

End Function ' GetValueList
' ##########################################################
' ##########################################################

'*****************************************************************************
'*        SUBROUTINE DECLARATION
'*****************************************************************************
'* Name:         UnitTest_DB
'*
'* Purpose:      Test the database connection
'* Assumptions:  GetConnStr has the correct connection string
'*               You need to edit 'SQL =' line to contain an appropriate query
'* Effects:      NONE
'* Inputs:       NONE
'* Returns:      Log only Fieldlist and all rows of query (CSV) 
'*****************************************************************************
'*       SUBROUTINE DESCRIPTION
'*****************************************************************************
'* Test the database connection
'*****************************************************************************
Public Sub UnitTest_DB()

dim SQL
dim rstLocal

SQL = "Select * from product_upc_type"
CreateRecordSet rstLocal, GetConnStr(), SQL, False 
rstLocal.MoveFirst
log.Message GetFieldList(rstLocal, ", ")
do while not rstLocal.EOF
  'Log.Message GetField(rstLocal, "upc_type_id") & ", " & _
  '            GetField(rstLocal, "type_descr") & ", " & _
  '            GetField(rstLocal, "datetime_created") & ", " & _
  '            GetField(rstLocal, "action_type_id_sale") & ", " & _
  '            GetField(rstLocal, "action_type_id_return"), _
  '            GetValueList(rstLocal, ", ")
  log.Message GetValueList(rstLocal, ", "), GetValueList(rstLocal, ", ")
  rstLocal.MoveNext
loop
CloseRecordset rstLocal

End Sub ' UnitTest_DB
' ##########################################################
' ##########################################################

'*****************************************************************************
'*        FUNCTION DECLARATION
'*****************************************************************************
'* Name:         AddRecordToDBTable
'*
'* Purpose:      Add a record to a table in the Database
'* Assumptions:  GetConnStr has the correct connection string
'*               sTable exists as a table in the database
'*               sFields is a comma delimited list of fields to add in the record
'*               sFields contains fields actually in the table (sTable)
'*               sValues is a comma delimited list of values to add to each field
'*               Values in sValues are appropriate for associated field.
'*               # of elements in sFields and sValues are equal (fails if not)
'* Effects:      row of data will be added to the database
'* Inputs:       sTable (Table to add record to)
'*               sFields (comma delimted list of all fields required to add row)
'*               sValues (comma delimted list of all values required to add row
'* Returns:      True (Success) False (Failure)
'* TODO:         Needs to have exception handling added
'*****************************************************************************
'*       FUNCTION DESCRIPTION
'*****************************************************************************
'* Add a record to a table in the Database
'*****************************************************************************
Public Function AddRecordToDBTable(sTable, sFields, sValues)


Dim dboConn
Dim rstAdd, rstCheck
Dim sSource
dim nFields, nValues, nTypes
dim Types()
Dim x, y

AddRecordToDBTable = True

' Don't do anything until we have validated the # of items in each of the input lists.
' NOTE: the list should be comma (,) delimited.
' sFields contains the Field names in the sTable table in the database ... it is up 
' to the calling function to insure that all the required fields are included or this
' function will fail.
' Now let's count the number of items in sFields
nFields = 0
Fields = Split(sFields, ",")
nTypes = 0
for each x in Fields
  if len(trim(x)) > 0 then
    nFields = nFields + 1
    
  else
    log.Warning "AddRecordToDBTable: Error: Empty Field Name in Fields parameter!", _
                "AddRecordToDBTable: Error: Empty Field Name in Fields parameter!" & vbCr & _
                "Here are the contents of the sFields parameter:" & vbCr & _
                sFields
    AddRecordToDBTable = False
    exit Function
  end if
next
' Now count the number of items in sValues
nValues = 0
Values = Split(sValues, ",")
for each x in Values
  nValues = nValues + 1
next
if Not (nFields = nValues) then
  ' List lengths do not match
  log.Warning "AddRecordToDBTable: Error: List Parameters do not have the same number of items!", _
              "AddRecordToDBTable: Error: List Parameters do not have the same number of items!" & vbCr & _
              "# Items Fields: " & nFields & vbCr & _
              "# Items Values: " & nValues & vbCr & _
              "Contents of sFields Parameter: " & vbCr & _
              sFields & vbCr & _
              "Contents of sValues Parameter: " & vbCr & _
              sValues & vbCr
  AddRecordToDBTable = False
  exit function
End if
' OK, if we get here the parameters have the same # of Items
' Now we need to check the field Names by querying the Source Table
' We will populate the Types Array to use later when preping data before sending to DB.
Set dboConn = CreateObject("ADODB.Connection")
dboConn.Open GetConnStr()
Set rstCheck = CreateObject("ADODB.Recordset")
sSQL = "SELECT column_name,* FROM information_schema.columns WHERE table_name = '" & sTable  &"'"
rstCheck.open "SELECT * FROM " & sTable & " WHERE 0 = 1", dboConn
nTypes = 0
for each x in Fields
  bFoundX = False
  for each y in rstCheck.Fields
    if ucase(Trim(x)) = ucase(Trim(y.name)) then
      bFoundX = True
      nTypes = nTypes  + 1
      if nTypes = 1 then
        redim Types(1)
      else
        redim preserve Types(nTypes - 1)
      end if
      Types(nTypes - 1) = y.type
      exit for
    end if
  next
  if not bFoundX then
    exit for
  end if
next 
if not bFoundX then
  log.Warning "AddRecordToDBTable: Error: Fields List Does not match schema! Please check Field Names and DB Table and make sure you are using the correct field names.", _
              "AddRecordToDBTable: Error: Fields List Does not match schema! Please check Field Names and DB Table and make sure you are using the correct field names." & vbCr & _
              "Here is the contents of the sFields Parameter:" & vbCr & _
              sFields
  AddRecordToDBTable = False
  exit function
end if

' NOTE: Will need a PrepValuesForDB function that converts values to the correct format
'       Based on the Types() array values.

Set rstAdd = CreateObject("ADODB.Recordset")
sSource = sTable

rstAdd.ActiveConnection = dboConn
rstAdd.CursorLocation = adUseClient
rstAdd.CursorType = adOpenKeyset
rstAdd.LockType = adLockOptimistic
rstAdd.Source = sSource
rstAdd.Open

rstAdd.AddNew
  i = 0 
  for each x in Fields
    rstAdd(x) = PrepValuesForDB(Values(i), Types(i))
    i = i + 1
  next
rstAdd.Update
if dboConn.Errors.Count > 0 then
  log.Warning "Error: " & Err.SQLState & ": " & Err.Description & " | " & Err.NativeError
  AddRecordToDBTable = False
else
  log.Message "Success!"
end if

End Function ' AddRecordToDBTable
' ##########################################################
' ##########################################################

'*****************************************************************************
'*        SUBROUTINE DECLARATION
'*****************************************************************************
'* Name:         UnitTest_AddRecordToDBTable
'*
'* Purpose:      Test AddRecordToDBTable
'* Assumptions:  GetConnStr has the correct connection string
'*               You need to edit AddRecordToDBTable to contain an appropriate
'*               data if the parameters. 
'* Effects:      Row will be added to the table
'* Inputs:       NONE
'* Returns:      Log only Success or Fail! 
'*****************************************************************************
'*       SUBROUTINE DESCRIPTION
'*****************************************************************************
'* Test AddRecordToDBTable
'*****************************************************************************
Public Sub UnitTest_AddRecordToDBTable()

if AddRecordToDBTable("product_upc_type", "upc_type_id,type_descr,datetime_created,action_type_id_sale,action_type_id_return", _
                                          "98,test-donotuse," & now() & ",1,1") _
then
  log.Message "Success!"
else
  log.Warning "FAIL!"
end if

End Sub ' UnitTest_AddRecordToDBTable
' ##########################################################
' ##########################################################

'*****************************************************************************
'*        FUNCTION DECLARATION
'*****************************************************************************
'* Name:         PrepValuesForDB
'*
'* Purpose:      Convert data to the correct type for database Updates and Adds
'* Assumptions:  all types in t are covered in Select Case statement 
'* Effects:      Value will be converted as appropriate based on type parameter
'* Inputs:       s (Value to Convert)
'*               t (Type to convert to)
'* Returns:      converted value 
'*****************************************************************************
'*       FUNCTION DESCRIPTION
'*****************************************************************************
'* Convert data to the correct type for database Updates and Adds
'*****************************************************************************
Public Function PrepValuesForDB(s, t)
' s is the value to Prep
' t is the type number
Select Case(t)
  Case ADEMPTY
    PrepValuesForDB = s
    exit function
    
  Case ADTINYINT, ADSMALLINT, ADINTEGER, ADBIGINT, ADUNSIGNEDTINYINT, ADUNSIGNEDSMALLINT, _
       ADUNSIGNEDINT, ADUNSIGNEDBIGINT, ADSINGLE
    PrepValuesForDB = CInt(s)
    exit function
    
  Case ADDOUBLE, ADCURRENCY, ADDECIMAL, ADNUMERIC
    PrepValuesForDB = CDbl(s)
    exit function
    
  Case ADBOOLEAN
    PrepValuesForDB = CBool(s)
    exit function
    
  Case ADERROR, ADUSERDEFINED, ADVARIANT, ADIDISPATCH, ADIUNKNOWN, ADGUID, ADDATE, _
       ADDBDATE, ADDBTIME, ADDBTIMESTAMP, ADBSTR, ADCHAR, ADVARCHAR, ADLONGVARCHAR, ADWCHAR, _
       ADVARWCHAR, ADLONGVARWCHAR, ADBINARY, ADVARBINARY, ADLONGVARBINARY, ADCHAPTER
    PrepValuesForDB = s
    exit function
  Case else
    'Log.Message "Unknown Type (" & t & ")"
    PrepValuesForDB = s
    'PrepValuesForDB = "Unknown"
end select
    
end function ' PrepValuesForDB
' ##########################################################
' ##########################################################

'*****************************************************************************
'*        SUBROUTINE DECLARATION
'*****************************************************************************
'* Name:         UnitTest_PrepValuesForDB
'*
'* Purpose:      Test the PrepValuesForDB
'* Assumptions:  None
'* Effects:      None
'* Inputs:       NONE
'* Returns:      Log only list of types and the value 
'*****************************************************************************
'*       SUBROUTINE DESCRIPTION
'*****************************************************************************
'* Test the PrepValuesForDB
'*****************************************************************************
Public Sub UnitTest_PrepValuesForDB()

for i = 0 to 205
  if PrepValuesForDB("0", i) <> "Unknown" then
    log.Message i & " - " & TypeName(PrepValuesForDB("0", i)) & " - " & PrepValuesForDB("0", i)
  end if
next 

End Sub ' UnitTest_PrepValuesForDB
' ##########################################################
' ##########################################################

'*****************************************************************************
'*        FUNCTION DECLARATION
'*****************************************************************************
'* Name:         UpdateCurrentDataRow
'*
'* Purpose:      Update the current record in rstIn
'* Assumptions:  rstIn is open and the current record is the one to update
'*               sFields is a comma delimited list of fields to update in the record
'*               sFields contains fields actually in the table (sTable)
'*               sValues is a comma delimited list of values to update each field to
'*               Values in sValues are appropriate for associated field.
'*               # of elements in sFields and sValues are equal (fails if not)
'* Effects:      row of data will be updated in the database
'* Inputs:       rstIn (ADO recordset to update)
'*               sFields (comma delimted list of all fields to be updated)
'*               sValues (comma delimted list of all values to update fields to)
'* Returns:      True (Success) False (Failure)
'* TODO:         Needs to have exception handling added
'*****************************************************************************
'*       FUNCTION DESCRIPTION
'*****************************************************************************
'* Update the current record in rstIn
'*****************************************************************************
Public Function UpdateCurrentDataRow(rstIn, sFields, sValues)

Dim dboConn
Dim rstCheck
dim nFields, nValues, nTypes
dim Types()
Dim x, y

Log.AppendFolder "Update Current Data Row", "Update Current Data Row Using:" & vbCr & _
                 "Field List: '" & sFields & "'" & vbCr & _
                 "Value List: '" & sValues & "'" 
  UpdateCurrentDataRow = True

  ' Don't do anything until we have validated the # of items in each of the input lists.
  ' NOTE: the list should be comma (,) delimited.
  ' sFields contains the Field names in the sTable table in the database ... it is up 
  ' to the calling function to insure that all the required fields are included or this
  ' function will fail.
  ' Now let's count the number of items in sFields
  nFields = 0
  Fields = Split(sFields, ",")
  nTypes = 0
  for each x in Fields
    if len(trim(x)) > 0 then
      nFields = nFields + 1
    
    else
      log.Warning "UpdateCurrentDataRow: Error: Empty Field Name in Fields parameter!", _
                  "UpdateCurrentDataRow: Error: Empty Field Name in Fields parameter!" & vbCr & _
                  "Here are the contents of the sFields parameter:" & vbCr & _
                  sFields
      UpdateCurrentDataRow = False
      exit Function
    end if
  next
  ' Now count the number of items in sValues
  nValues = 0
  Values = Split(sValues, ",")
  for each x in Values
    nValues = nValues + 1
  next
  if Not (nFields = nValues) then
    ' List lengths do not match
    log.Warning "UpdateCurrentDataRow: Error: List Parameters do not have the same number of items!", _
                "UpdateCurrentDataRow: Error: List Parameters do not have the same number of items!" & vbCr & _
                "# Items Fields: " & nFields & vbCr & _
                "# Items Values: " & nValues & vbCr & _
                "Contents of sFields Parameter: " & vbCr & _
                sFields & vbCr & _
                "Contents of sValues Parameter: " & vbCr & _
                sValues & vbCr
    UpdateCurrentDataRow = False
    exit function
  End if
  ' OK, if we get here the parameters have the same # of Items
  ' Now we need to check the field Names by querying the Source Table
  ' We will populate the Types Array to use later when preping data before sending to DB.
  Set dboConn = CreateObject("ADODB.Connection")
  dboConn.Open GetConnStr()
  Set rstCheck = CreateObject("ADODB.Recordset")
  Set rstCheck = rstIn
  nTypes = 0
  for each x in Fields
    bFoundX = False
    for each y in rstCheck.Fields
      if ucase(Trim(x)) = ucase(Trim(y.name)) then
        bFoundX = True
        nTypes = nTypes  + 1
        if nTypes = 1 then
          redim Types(1)
        else
          redim preserve Types(nTypes - 1)
        end if
        Types(nTypes - 1) = y.type
        exit for
      end if
    next
    if not bFoundX then
      exit for
    end if
  next 
  if not bFoundX then
    log.Warning "UpdateCurrentDataRow: Error: Fields List Does not match schema! Please check Field Names and DB Table and make sure you are using the correct field names.", _
                "UpdateCurrentDataRow: Error: Fields List Does not match schema! Please check Field Names and DB Table and make sure you are using the correct field names." & vbCr & _
                "Here is the contents of the sFields Parameter:" & vbCr & _
                sFields
    UpdateCurrentDataRow = False
    exit function
  end if
  
  i = 0 
  for each x in Fields
    rstIn(x) = PrepValuesForDB(Values(i), Types(i))
    i = i + 1
  next
  rstIn.Update
  bFailed = False
  i = 0 
  for each x in Fields
    if rstIn(x) <> PrepValuesForDB(Values(i), Types(i)) then
      bFailed = True
      log.Warning "Update Failed for " & x, "Expeccted: " & Values(i) & vbCr & _
                                            "Actual    : " & rstIn(x)
    else
      log.Message "Update Succeeded for " & x, "Expeccted: " & Values(i) & vbCr & _
                                            "Actual    : " & rstIn(x)
    end if
    i = i + 1
  next
  rstIn.Update
  if bFailed then
    log.Warning "Update Failed", "Updated Failed"
    UpdateCurrentDataRow = False
  else
    log.Message "Update Done", "Update Done"
    UpdateCurrentDataRow = True
  end if
log.PopLogFolder

End Function ' UpdateCurrentDataRow
' ##########################################################
' ##########################################################

'*****************************************************************************
'*        SUBROUTINE DECLARATION
'*****************************************************************************
'* Name:         UnitTest_UpdateCurrentDataRow
'*
'* Purpose:      Test the UpdateCurrentDataRow
'* Assumptions:  GetConnStr has the correct connection string
'*               You need to edit 'sSQL =' line to have the correct recordset
'*               You won't cause any problems by updating the 1st record in recordset
'*               You have to edit the UpdataCurrentDataRow call to have the 
'*               appropriate data
'*               You should reverse this update after the test.
'*               *** USE WITH CAUTION *** 
'* Effects:      Row will be updated in the database
'* Inputs:       NONE
'* Returns:      Log only Success or Fail! 
'*****************************************************************************
'*       SUBROUTINE DESCRIPTION
'*****************************************************************************
'* Test the UpdateCurrentDataRow
'*****************************************************************************
public Sub UnitTest_UpdateCurrentDataRow()

Dim sSQL
dim rstLocal

sSQL = "SELECT * From auto_order_details"

CreateRecordSet rstLocal, GetConnStr(), sSQL, True

rstLocal.MoveFirst

if UpdateCurrentDataRow(rstLocal, "billing_email_address,billing_zip_code", _
                                  rstLocal("billing_email_address") & "s" & "," & _
                                  "30303") _
then
  log.Message "Success!", "Success!"
else
  log.Warning "Could not update Current Row!", "Could not update Current Row!"
end if

end Sub ' UnitTest_UpdateCurrentDataRow
' ##########################################################
' ##########################################################


